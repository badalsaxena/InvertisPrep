# InvertisPrep Project Plan

## Phase 1: Setup & Core Structure (Week 1)
- [x] Initialize React + Vite project
- [x] Set up Tailwind CSS and shadcn/ui
- [x] Configure TypeScript setup
- [x] Set up project structure
- [x] Configure path aliases (@/*)
- [x] Set up routing system
- [ ] Design and implement authentication system

## Phase 2: Resource Management (Week 2)
- [ ] Create resource upload system
- [ ] Implement file storage solution
- [ ] Build search functionality
- [ ] Create resource display components
- [ ] Implement admin moderation system

## Phase 3: Quizzo Development (Week 3)
- [ ] Design quiz battle system
- [ ] Implement Socket.IO for real-time functionality
- [ ] Create matchmaking system
- [ ] Build quiz interface
- [ ] Implement scoring system

## Phase 4: User Features (Week 4)
- [ ] Create user dashboard
- [ ] Implement leaderboard system
- [ ] Build profile management
- [ ] Create activity tracking
- [ ] Implement notification system

## Phase 5: Polish & Testing (Week 5)
- [ ] UI/UX improvements
- [ ] Performance optimization
- [ ] Security testing
- [ ] User testing
- [ ] Bug fixes

## Tech Stack Details
- Frontend: React + Vite + TypeScript
- UI: Tailwind CSS + shadcn/ui
- Backend: Node.js + Express
- Real-time: Socket.IO
- Database: MongoDB
- Storage: AWS S3 or similar
- Authentication: JWT

## File Structure
```
src/
├── components/
│   ├── ui/           # shadcn/ui components
│   ├── layout/       # Layout components
│   ├── resources/    # Resource management
│   ├── quizzo/       # Quiz components
│   └── shared/       # Shared components
├── pages/
│   ├── Home/
│   ├── Resources/
│   ├── Quizzo/
│   ├── Dashboard/
│   └── Profile/
├── lib/             # Utility functions and types
├── services/        # API services
├── utils/          # Helper functions
└── assets/         # Static assets
```

## Key Components to Build
1. Navigation Bar
2. Resource Card
3. Quiz Battle Interface
4. User Dashboard
5. Search Component
6. Upload Interface
7. Leaderboard
8. Profile Section

## TypeScript Configuration
- [x] tsconfig.json setup
- [x] tsconfig.app.json setup
- [x] tsconfig.node.json setup
- [x] Path aliases configured
- [x] Vite TypeScript configuration
- [x] ESLint TypeScript configuration 

# Academic Resources Implementation Plan (Local Storage Version)

## 1. File & Data Structure

### Local Storage Structure
```
/public/resources/
├── btech/
│   ├── computer-science/
│   │   ├── semester-1/
│   │   │   ├── 2023-24/
│   │   │   │   ├── notes/
│   │   │   │   ├── pyq/
│   │   │   │   └── syllabus/
│   │   └── semester-2/
│   └── electronics/
└── bca/
    ├── semester-1/
    │   ├── 2023-24/
    │   │   ├── notes/
    │   │   ├── pyq/
    │   │   └── syllabus/
    └── semester-2/

### Data Structure (data.json)
```json
{
  "departments": [
    {
      "id": "btech",
      "name": "B.Tech",
      "icon": "/icons/btech.svg",
      "description": "Bachelor of Technology",
      "branches": [
        {
          "id": "cse",
          "name": "Computer Science",
          "semesters": [1, 2, 3, 4, 5, 6, 7, 8]
        },
        {
          "id": "ece",
          "name": "Electronics",
          "semesters": [1, 2, 3, 4, 5, 6, 7, 8]
        }
      ]
    },
    {
      "id": "bca",
      "name": "BCA",
      "icon": "/icons/bca.svg",
      "description": "Bachelor of Computer Applications",
      "semesters": [1, 2, 3, 4, 5, 6]
    }
  ]
}
```

## 2. Component Structure

### Pages
1. ResourcesHome (/resources)
   ```tsx
   // Grid layout with department cards
   // Each card has icon, name, description
   // Professional hover effects and animations
   ```

2. DepartmentView (/resources/[department])
   ```tsx
   // If BTech, show branch selection
   // If BCA, directly show semester selection
   // Clean, professional UI with breadcrumb navigation
   ```

3. ResourceView (/resources/[department]/[branch?]/[semester])
   ```tsx
   // Display resources in tabs: Notes, PYQs, Syllabus
   // Card-based layout with download buttons
   // Search and filter functionality
   ```

### Components
1. DepartmentCard
   ```tsx
   interface DepartmentCardProps {
     id: string
     name: string
     icon: string
     description: string
     stats?: {
       resources: number
       downloads: number
     }
   }
   ```

2. ResourceSelector
   ```tsx
   interface ResourceSelectorProps {
     department: string
     branch?: string
     semester: number
     onSelect: (selection: ResourceSelection) => void
   }
   ```

3. ResourceList
   ```tsx
   interface ResourceListProps {
     resources: Resource[]
     type: 'notes' | 'pyq' | 'syllabus'
     onDownload: (resourceId: string) => void
   }
   ```

## 3. Implementation Steps

1. Setup Resource Structure
   ```bash
   # Create directory structure
   mkdir -p public/resources/{btech,bca}
   # Add sample PDFs for testing
   ```

2. Create Data File
   ```typescript
   // src/data/resources.ts
   export const departmentData = {
     // Department information
   }
   ```

3. Build Components
   - Create reusable components with shadcn/ui
   - Implement responsive design
   - Add loading states and error handling

4. Implement Resource Handling
   ```typescript
   // src/utils/resourceHandler.ts
   export const getResourcePath = (
     department: string,
     branch: string | null,
     semester: number,
     type: ResourceType
   ) => {
     // Generate correct path for resource
   }
   ```

## 4. UI/UX Features

1. Department Selection
   - Large, clickable cards
   - Hover effects with quick stats
   - Smooth transitions

2. Resource Navigation
   - Breadcrumb navigation
   - Clear hierarchy display
   - Quick filters and search

3. Resource Display
   - Grid/List view toggle
   - Sort by date/name/downloads
   - Preview functionality

4. Responsive Design
   ```css
   /* Mobile First Approach */
   .resource-grid {
     grid-template-columns: 1fr;
   }

   @media (min-width: 640px) {
     .resource-grid {
       grid-template-columns: repeat(2, 1fr);
     }
   }

   @media (min-width: 1024px) {
     .resource-grid {
       grid-template-columns: repeat(3, 1fr);
     }
   }
   ```

## 5. Performance Optimization

1. Resource Loading
   - Lazy load PDFs
   - Implement virtual scrolling
   - Cache frequently accessed data

2. Image Optimization
   - Optimize department icons
   - Use appropriate image formats
   - Implement lazy loading

## 6. Future Considerations

1. Easy Migration Path
   - Structure data to easily migrate to Firebase later
   - Keep file paths consistent
   - Document all resource locations

2. Scalability
   - Plan for more departments
   - Consider compression for large files
   - Implement proper error boundaries

This implementation provides:
- Professional, responsive UI
- Easy local development
- Simple resource management
- Clear upgrade path to cloud storage
- Efficient resource organization 