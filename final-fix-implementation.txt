# FINAL IMPLEMENTATION GUIDE FOR QUIZZO BACKEND FIX

## COMPREHENSIVE SOLUTION FOR BACKEND SERVER

This guide combines solutions from fix2.txt and fix22.txt to resolve both issues:
1. API endpoints not found (404 errors)
2. Quiz rewards not being added to Firestore (500 errors)

## STEP 1: UPDATE DEPENDENCIES

First, ensure all required packages are installed:

```bash
# In your backend directory
npm install firebase-admin dotenv express cors node-fetch@2
```

Note: If using Node.js v18+, you can use the newer version of node-fetch.

## STEP 2: ADD REQUIRED API ENDPOINTS

Add these missing API endpoints to your server.js file (after your middleware setup):

```javascript
/**
 * Health Check API
 * Used by the frontend to verify server connectivity
 */
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    message: 'Quizzo backend server is running',
    timestamp: new Date().toISOString()
  });
});

/**
 * Questions API
 * Provides quiz questions for frontend
 */
app.get('/questions', (req, res) => {
  const subject = req.query.subject || 'general';
  
  // Sample questions - replace with actual questions from your database
  const questions = [
    {
      id: '1',
      question: 'What is the time complexity of binary search?',
      options: ['O(1)', 'O(n)', 'O(log n)', 'O(n log n)'],
      correctAnswer: 2
    },
    {
      id: '2',
      question: 'Which of the following is not a JavaScript data type?',
      options: ['String', 'Boolean', 'Character', 'Number'],
      correctAnswer: 2
    }
  ];
  
  res.json({ 
    subject,
    questions,
    timestamp: new Date().toISOString()
  });
});

/**
 * Subject-specific Questions API
 */
app.get('/questions/:subject', (req, res) => {
  const subject = req.params.subject;
  
  // Sample questions for the specific subject
  const questions = [
    {
      id: '1',
      question: `Sample ${subject} question 1?`,
      options: ['Option A', 'Option B', 'Option C', 'Option D'],
      correctAnswer: 2
    },
    {
      id: '2',
      question: `Sample ${subject} question 2?`,
      options: ['Option A', 'Option B', 'Option C', 'Option D'],
      correctAnswer: 1
    }
  ];
  
  res.json({ 
    subject,
    questions,
    timestamp: new Date().toISOString()
  });
});

/**
 * Test API for basic connectivity testing
 */
app.get('/test', (req, res) => {
  res.json({ 
    message: 'Backend HTTP endpoint is reachable',
    timestamp: new Date().toISOString()
  });
});

/**
 * Root endpoint providing API documentation
 */
app.get('/', (req, res) => {
  res.send(`
    <html>
      <head><title>Quizzo Backend Server</title></head>
      <body>
        <h1>Quizzo Backend Server</h1>
        <p>Server is running. Available endpoints:</p>
        <ul>
          <li><a href="/health">/health</a> - Check server health</li>
          <li><a href="/test">/test</a> - Test connectivity</li>
          <li><a href="/questions">/questions</a> - Get general questions</li>
          <li><a href="/questions/javascript">/questions/javascript</a> - Get subject-specific questions</li>
        </ul>
        <p>Server time: ${new Date().toLocaleString()}</p>
      </body>
    </html>
  `);
});
```

## STEP 3: FIX CORS CONFIGURATION

Update your CORS setup at the top of your server file:

```javascript
// Add this BEFORE any route handlers
app.use(cors({
  origin: '*',  // In production, restrict this to your frontend domain
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-API-Key', 'Origin', 'Accept'],
  credentials: true
}));

// Make sure you have body parsing middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Add request logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
  next();
});
```

## STEP 4: INITIALIZE FIREBASE ADMIN SDK

Add this Firebase Admin initialization near the top of your server.js file:

```javascript
// Firebase Admin SDK setup
let admin;
try {
  admin = require('firebase-admin');
  // Check if service account file exists
  try {
    const serviceAccount = require('./service-account.json');
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount)
    });
    console.log('✅ Firebase Admin SDK initialized successfully');
  } catch (error) {
    console.warn('⚠️ Service account file not found. Direct Firebase updates will not be available.');
    console.warn('Create a service-account.json file in your backend directory.');
  }
} catch (error) {
  console.warn('⚠️ Firebase Admin SDK not installed. Direct Firebase updates will not be available.');
  console.warn('Run: npm install firebase-admin');
}
```

## STEP 5: FIX QUIZ REWARD ENDPOINT

Replace or update your current `/quiz-reward` endpoint with this fixed version:

```javascript
/**
 * Quiz Reward API
 * Handles both reward processing methods
 */
app.post('/quiz-reward', async (req, res) => {
  // Extract data from request
  const { uid, quizType, outcome, subject, score, opponent } = req.body;
  
  // Validate request
  if (!uid || !quizType || !outcome || !subject) {
    return res.status(400).json({
      error: 'Missing required parameters',
      required: ['uid', 'quizType', 'outcome', 'subject', 'score']
    });
  }
  
  try {
    // Calculate reward
    const isWinner = outcome === 'win';
    const reward = isWinner ? 5 : 1;
    
    console.log(`Processing reward for user ${uid}: ${reward} QCoins for ${isWinner ? 'winning' : 'participating in'} a ${quizType} quiz in ${subject}`);
    
    // First try to use the frontend API
    let frontendApiSuccess = false;
    let frontendApiError = null;
    
    try {
      // Prepare payload for frontend API
      const payload = {
        uid,
        amount: reward,
        isWinner,
        quizType,
        subject,
        score
      };
      
      // Encode the payload for URL transmission
      const encodedPayload = encodeURIComponent(JSON.stringify(payload));
      
      // Get the frontend URL from environment
      const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:5173';
      const API_SECRET_KEY = process.env.API_SECRET_KEY || 'development-secret-key';
      
      console.log(`Calling frontend API at: ${FRONTEND_URL}/api/quiz-rewards?payload=${encodedPayload.slice(0, 20)}...`);
      
      // Use node-fetch to make the request
      const fetch = require('node-fetch');
      
      const response = await fetch(`${FRONTEND_URL}/api/quiz-rewards?payload=${encodedPayload}`, {
        method: 'GET', // IMPORTANT: Using GET with URL params instead of POST
        headers: {
          'Content-Type': 'application/json',
          'X-API-Key': API_SECRET_KEY
        }
      });
      
      // Read and log the complete response for debugging
      const responseText = await response.text();
      console.log(`Frontend API response (${response.status}):`, responseText);
      
      // Try to parse the response as JSON
      let responseData;
      try {
        responseData = JSON.parse(responseText);
      } catch (e) {
        responseData = { text: responseText };
      }
      
      if (response.ok) {
        frontendApiSuccess = true;
        console.log('Frontend API call successful');
      } else {
        frontendApiError = `API returned ${response.status}: ${JSON.stringify(responseData)}`;
        console.error('Frontend API error:', frontendApiError);
      }
    } catch (apiError) {
      frontendApiError = apiError.message;
      console.error('Frontend API call failed:', apiError);
    }
    
    // If frontend API failed and we have Firebase Admin, try direct update
    let directUpdateSuccess = false;
    let directUpdateError = null;
    
    if (!frontendApiSuccess && admin) {
      try {
        console.log('Attempting direct Firebase update...');
        
        // Get Firestore instance
        const db = admin.firestore();
        
        // Create a transaction to safely update the user's wallet
        await db.runTransaction(async (transaction) => {
          // Get reference to user document
          const userRef = db.collection('users').doc(uid);
          const userDoc = await transaction.get(userRef);
          
          if (!userDoc.exists) {
            throw new Error(`User ${uid} not found in Firestore`);
          }
          
          // Get current user data
          const userData = userDoc.data();
          
          // Get or initialize wallet
          const wallet = userData.wallet || { balance: 0, transactions: [] };
          
          // Create a transaction description based on quiz outcome
          const description = isWinner ? 
            `${quizType === 'multiplayer' ? 'Multiplayer' : 'Single Player'} Quiz victory in ${subject}` : 
            `${quizType === 'multiplayer' ? 'Multiplayer' : 'Single Player'} Quiz participation in ${subject}`;
          
          // Create transaction record
          const transactionRecord = {
            id: Date.now().toString(),
            amount: reward,
            type: 'REWARD',
            description,
            timestamp: admin.firestore.FieldValue.serverTimestamp(),
            status: 'COMPLETED'
          };
          
          // Update user document with new wallet balance and transaction
          transaction.update(userRef, {
            'wallet.balance': (wallet.balance || 0) + reward,
            'wallet.lastUpdated': admin.firestore.FieldValue.serverTimestamp(),
            'wallet.transactions': admin.firestore.FieldValue.arrayUnion(transactionRecord)
          });
        });
        
        // Also update academic progress since we're handling it directly
        await updateAcademicProgress(uid, isWinner, subject, score);
        
        directUpdateSuccess = true;
        console.log(`Direct Firebase update successful - added ${reward} QCoins to user ${uid}`);
      } catch (dbError) {
        directUpdateError = dbError.message;
        console.error('Direct Firebase update failed:', dbError);
      }
    }
    
    // Determine final status based on which method succeeded
    const success = frontendApiSuccess || directUpdateSuccess;
    
    // Return response with appropriate status and details
    res.status(success ? 200 : 500).json({
      success,
      reward,
      user: uid,
      frontendApiSuccess,
      directUpdateSuccess,
      errors: {
        frontendApi: frontendApiError,
        directUpdate: directUpdateError
      },
      message: success 
        ? `${reward} QCoins added for ${isWinner ? 'winning' : 'participating in'} a ${quizType} quiz` 
        : 'Failed to add QCoins'
    });
  } catch (error) {
    console.error('Error processing quiz reward:', error);
    res.status(500).json({ 
      error: 'Failed to process reward',
      message: error.message
    });
  }
});

/**
 * Update academic progress directly in Firebase
 * Helper function for direct updates
 */
async function updateAcademicProgress(uid, isWin, subject, score) {
  if (!admin) return false;
  
  try {
    const db = admin.firestore();
    const userRef = db.collection('users').doc(uid);
    const userDoc = await userRef.get();
    
    if (!userDoc.exists) {
      console.error(`User ${uid} not found for academic progress update`);
      return false;
    }
    
    const userData = userDoc.data();
    const progress = userData.academicProgress || {
      quizzesCompleted: 0,
      quizzesWon: 0,
      quizzesLost: 0,
      totalQuestionsAnswered: 0,
      correctAnswersCount: 0,
      accuracy: 0,
      lastQuizDate: new Date(),
      subjects: {},
      streak: {
        current: 0,
        max: 0,
        lastPlayed: new Date()
      },
      rank: 'Beginner'
    };
    
    // Update quiz counts
    progress.quizzesCompleted += 1;
    if (isWin) {
      progress.quizzesWon += 1;
    } else {
      progress.quizzesLost += 1;
    }
    
    // Calculate the correct answers from score (assuming 10 points per correct answer)
    const correctAnswers = Math.floor(score / 10);
    const totalQuestions = 10; // Assuming 10 questions per quiz
    
    // Update question stats
    progress.totalQuestionsAnswered += totalQuestions;
    progress.correctAnswersCount += correctAnswers;
    
    // Calculate accuracy
    if (progress.totalQuestionsAnswered > 0) {
      progress.accuracy = Math.round(
        (progress.correctAnswersCount / progress.totalQuestionsAnswered) * 100
      );
    }
    
    // Update subject stats
    if (!progress.subjects[subject]) {
      progress.subjects[subject] = {
        completed: 0,
        correct: 0,
        total: 0,
        accuracy: 0
      };
    }
    
    const subjectStats = progress.subjects[subject];
    subjectStats.completed += 1;
    subjectStats.correct += correctAnswers;
    subjectStats.total += totalQuestions;
    
    if (subjectStats.total > 0) {
      subjectStats.accuracy = Math.round(
        (subjectStats.correct / subjectStats.total) * 100
      );
    }
    
    // Update last quiz date
    progress.lastQuizDate = admin.firestore.FieldValue.serverTimestamp();
    
    // Update streak
    const now = new Date();
    if (progress.streak.lastPlayed) {
      const lastPlayed = progress.streak.lastPlayed instanceof Date 
        ? progress.streak.lastPlayed 
        : new Date(progress.streak.lastPlayed);
      
      // Check if last played was yesterday or today
      const dayDiff = Math.floor(
        (now.getTime() - lastPlayed.getTime()) / (1000 * 60 * 60 * 24)
      );
      
      if (dayDiff <= 1) {
        // Streak continues
        progress.streak.current += 1;
        if (progress.streak.current > progress.streak.max) {
          progress.streak.max = progress.streak.current;
        }
      } else {
        // Streak resets
        progress.streak.current = 1;
      }
    } else {
      // First streak day
      progress.streak.current = 1;
      progress.streak.max = 1;
    }
    
    progress.streak.lastPlayed = admin.firestore.FieldValue.serverTimestamp();
    
    // Update academic progress in Firestore
    await userRef.update({
      academicProgress: progress
    });
    
    console.log(`Academic progress updated for user ${uid}`);
    return true;
  } catch (error) {
    console.error(`Error updating academic progress for user ${uid}:`, error);
    return false;
  }
}
```

## STEP 6: UPDATE ENVIRONMENT VARIABLES

Create a `.env` file in your backend directory with these variables:

```
# API configuration
PORT=8080
FRONTEND_URL=http://localhost:5173
API_SECRET_KEY=development-secret-key
NODE_ENV=development

# CORS configuration
CORS_ORIGIN=*
```

## STEP 7: CREATE A TEST SCRIPT

Create a new file `test-reward.js` in your backend directory:

```javascript
// Test script for reward processing
require('dotenv').config();
const fetch = require('node-fetch');

// Test user - REPLACE WITH A REAL USER ID from your database
const TEST_USER_ID = "ezcode"; // <-- Change this

// Test data
const testData = {
  uid: TEST_USER_ID,
  quizType: 'multiplayer',
  outcome: 'win',
  subject: 'c',
  score: 80
};

// Test the quiz-reward endpoint
async function testQuizReward() {
  try {
    console.log('Testing quiz reward processing...');
    const apiUrl = 'http://localhost:8080/quiz-reward';
    
    console.log(`Sending test data to ${apiUrl}:`, testData);
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });
    
    const text = await response.text();
    console.log(`Response status: ${response.status}`);
    
    try {
      const data = JSON.parse(text);
      console.log('Response data:', data);
      
      if (data.success) {
        console.log('✅ TEST PASSED: Quiz reward processed successfully');
      } else {
        console.log('❌ TEST FAILED: Quiz reward not processed');
        console.log('Errors:', data.errors);
      }
    } catch (e) {
      console.log('❌ TEST FAILED: Invalid JSON response');
      console.log('Response text:', text);
    }
  } catch (error) {
    console.error('❌ TEST FAILED with error:', error);
  }
}

// Run the test
testQuizReward();
```

## STEP 8: VERIFY IMPLEMENTATION

1. Restart your backend server
2. Run the test script:
   ```bash
   node test-reward.js
   ```
3. Check API endpoints:
   - Visit http://localhost:8080/health
   - Visit http://localhost:8080/test
   
4. Try a quiz in your app and verify that QCoins are added correctly

## STEP 9: VERIFY FRONTEND CONNECTIVITY

1. On your frontend, click "Test Backend" in the dialog
2. Check if all tests pass
3. Click "Test Direct QCoin Reward" to verify direct Firebase access

## TROUBLESHOOTING

If issues persist:

1. **Server not responding at all**:
   - Check that your server is running on port 8080
   - Ensure there are no port conflicts

2. **CORS errors in browser console**:
   - Verify CORS settings on backend
   - Try a different browser

3. **Firebase errors**:
   - Make sure service-account.json contains valid credentials
   - Check Firestore security rules

4. **Socket connections work but HTTP fails**:
   - Ensure Express is properly configured before Socket.IO
   - Check if a proxy or firewall is blocking HTTP requests

5. **404 errors on endpoints**:
   - Double-check endpoint paths
   - Ensure middleware isn't blocking routes

6. **QCoins not being added**:
   - Run the test script to isolate the issue
   - Check console logs for clues
   - Verify user exists in Firestore

This comprehensive solution addresses both the basic API connectivity issues and the specific QCoin reward integration, providing multiple fallback methods. 